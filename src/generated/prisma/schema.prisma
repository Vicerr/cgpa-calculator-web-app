generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String            @id @default(uuid())
  firstName   String
  lastName    String
  password    String
  email       String            @unique
  verified    Boolean           @default(false)
  sessions    AcademicSession[]
  createdAt   DateTime          @default(now())
  Account     Account[]
  AuthSession AuthSession[]
}

model AcademicSession {
  id        String     @id @default(uuid())
  name      String
  user      User       @relation(fields: [userId], references: [id])
  userId    String //userId is going to determine the user that owns this session by storing the user's id in the user model in userId (foreign key)
  semester  Semester[]
  createdAt DateTime   @default(now())

  @@unique([userId, name]) // each user should be able to create only 1 session with the same session name (no repetitive session name)
}

model Semester {
  id        String          @id @default(uuid())
  name      String
  session   AcademicSession @relation(fields: [sessionId], references: [id])
  sessionId String
  courses   Course[]
  createdAt DateTime        @default(now())

  @@unique([sessionId, name])
}

model Course {
  id          String   @id @default(uuid())
  courseTitle String
  courseCode  String
  courseLoad  Int
  grade       String
  semester    Semester @relation(fields: [semesterId], references: [id])
  semesterId  String
  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuthSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
